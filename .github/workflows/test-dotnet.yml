name: Test .NET

on:
    push:
        branches:
            - master
        paths-ignore:
            - '*.md'
            - 'Docs/**'
            - 'Examples/**'
            - '.gitignore'
    pull_request:
        branches:
            - master

env:
    DOTNET_VERSION: '8.x'
    BUILD_CONFIGURATION: 'Release'

jobs:
    test-windows:
        name: 'Windows'
        runs-on: windows-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore dependencies
              run: dotnet restore DnsClientX.sln

            - name: Build solution
              run: dotnet build DnsClientX.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

            - name: Run tests
              run: dotnet test DnsClientX.Tests/DnsClientX.Tests.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --framework net8.0 --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --results-directory TestResults --collect:"XPlat Code Coverage"

            - name: Summarize test results
              shell: bash
              run: |
                  FAILED=$(grep -o 'outcome="Failed"' TestResults/test-results.trx | wc -l)
                  TOTAL=$(grep -oP 'total="\d+"' TestResults/test-results.trx | head -1 | grep -oP '\d+')
                  echo "Failed: $FAILED of $TOTAL tests" >> "$GITHUB_STEP_SUMMARY"
                  if [ "$TOTAL" -gt 0 ] && [ $(( FAILED * 100 / TOTAL )) -gt 30 ]; then
                      echo "More than 30% of tests failed." >> "$GITHUB_STEP_SUMMARY"
                      exit 1
                  fi

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results-windows
                  path: '**/*.trx'

            - name: Upload coverage reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: coverage-reports-windows
                  path: '**/coverage.cobertura.xml'

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  files: '**/coverage.cobertura.xml'

    test-ubuntu:
        name: 'Ubuntu'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore dependencies
              run: dotnet restore DnsClientX.sln

            - name: Build solution
              run: dotnet build DnsClientX.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

            - name: Run tests
              run: dotnet test DnsClientX.Tests/DnsClientX.Tests.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --framework net8.0 --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --results-directory TestResults --collect:"XPlat Code Coverage"

            - name: Summarize test results
              shell: bash
              run: |
                  FAILED=$(grep -o 'outcome="Failed"' TestResults/test-results.trx | wc -l)
                  TOTAL=$(grep -oP 'total="\d+"' TestResults/test-results.trx | head -1 | grep -oP '\d+')
                  echo "Failed: $FAILED of $TOTAL tests" >> "$GITHUB_STEP_SUMMARY"
                  if [ "$TOTAL" -gt 0 ] && [ $(( FAILED * 100 / TOTAL )) -gt 30 ]; then
                      echo "More than 30% of tests failed." >> "$GITHUB_STEP_SUMMARY"
                      exit 1
                  fi

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results-ubuntu
                  path: '**/*.trx'

            - name: Upload coverage reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: coverage-reports-ubuntu
                  path: '**/coverage.cobertura.xml'

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  files: '**/coverage.cobertura.xml'

    test-macos:
        name: 'macOS'
        runs-on: macos-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore dependencies
              run: dotnet restore DnsClientX.sln

            - name: Build solution
              run: dotnet build DnsClientX.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

            - name: Run tests
              run: dotnet test DnsClientX.Tests/DnsClientX.Tests.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --framework net8.0 --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --results-directory TestResults --collect:"XPlat Code Coverage"

            - name: Summarize test results
              shell: bash
              run: |
                  FAILED=$(grep -o 'outcome="Failed"' TestResults/test-results.trx | wc -l)
                  TOTAL=$(grep -oP 'total="\d+"' TestResults/test-results.trx | head -1 | grep -oP '\d+')
                  echo "Failed: $FAILED of $TOTAL tests" >> "$GITHUB_STEP_SUMMARY"
                  if [ "$TOTAL" -gt 0 ] && [ $(( FAILED * 100 / TOTAL )) -gt 30 ]; then
                      echo "More than 30% of tests failed." >> "$GITHUB_STEP_SUMMARY"
                      exit 1
                  fi

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results-macos
                  path: '**/*.trx'

            - name: Upload coverage reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: coverage-reports-macos
                  path: '**/coverage.cobertura.xml'

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  files: '**/coverage.cobertura.xml'

